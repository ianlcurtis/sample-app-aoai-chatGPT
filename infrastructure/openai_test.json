{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('storage', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the storage account"
      },
      "minLength": 3,
      "maxLength": 24
    },
    "searchServiceName": {
      "type": "string",
      "defaultValue": "[concat('search', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Azure AI Search service"
      },
      "minLength": 2,
      "maxLength": 64
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[parameters('storageAccountName')]",
      "location": "uksouth",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "BlobStorage",
      "properties": {
        "accessTier": "Hot",
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false,
        "allowSharedKeyAccess": true,
        "defaultToOAuthAuthentication": false,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow",
          "ipRules": [],
          "virtualNetworkRules": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2022-09-01",
      "name": "[concat(parameters('storageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2022-09-01",
      "name": "[concat(parameters('storageAccountName'), '/default/data')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2021-04-01-preview",
      "name": "[parameters('searchServiceName')]",
      "location": "uksouth",
      "sku": {
        "name": "standard"
      },
      "properties": {
        "replicaCount": 1,
        "partitionCount": 1,
        "hostingMode": "default"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "searchIndexerSetup",
      "location": "uksouth",
      "dependsOn": [
        "[resourceId('Microsoft.Search/searchServices', parameters('searchServiceName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "kind": "AzurePowerShell",
      "properties": {
        "azPowerShellVersion": "7.5",
        "timeout": "PT30M",
        "arguments": "[format(' -SearchServiceName {0} -SearchServiceSku standard -SearchIndexName copindex -SearchIndexerName copindexer -SearchDataSourceName copdata -StorageAccountName {1} -StorageContainerName data -ResourceGroupName {2}', parameters('searchServiceName'), parameters('storageAccountName'), resourceGroup().name)]",
        "scriptContent": "
          param(
            [string] $SearchServiceName,
            [string] $SearchServiceSku,
            [string] $SearchIndexName,
            [string] $SearchIndexerName,
            [string] $SearchDataSourceName,
            [string] $StorageAccountName,
            [string] $StorageContainerName,
            [string] $ResourceGroupName
          )

          # Get the search service admin API key
          $searchService = Get-AzResource -ResourceType 'Microsoft.Search/searchServices' -ResourceName $SearchServiceName -ResourceGroupName $ResourceGroupName
          $adminKey = (Invoke-AzRestMethod -Uri \"https://management.azure.com$($searchService.ResourceId)/listAdminKeys?api-version=2021-04-01-preview\" -Method Post).Content | ConvertFrom-Json | Select -ExpandProperty primaryKey

          # Get storage account key
          $storageKey = (Get-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName)[0].Value

          # Create data source
          $dataSourceDefinition = @{
            name = $SearchDataSourceName
            type = 'azureblob'
            credentials = @{
              connectionString = \"DefaultEndpointsProtocol=https;AccountName=$StorageAccountName;AccountKey=$storageKey;EndpointSuffix=core.windows.net\"
            }
            container = @{
              name = $StorageContainerName
            }
          }
          $dataSourcePayload = $dataSourceDefinition | ConvertTo-Json -Depth 10
          $dataSourceHeaders = @{
            'api-key' = $adminKey
            'Content-Type' = 'application/json'
          }
          Invoke-RestMethod -Uri \"https://$SearchServiceName.search.windows.net/datasources/$SearchDataSourceName`?api-version=2020-06-30\" -Method Put -Headers $dataSourceHeaders -Body $dataSourcePayload

          # Create index
          $indexDefinition = @{
            name = $SearchIndexName
            fields = @(
              @{
                name = 'id'
                type = 'Edm.String'
                key = $true
                searchable = $false
              },
              @{
                name = 'metadata_storage_name'
                type = 'Edm.String'
                searchable = $true
                filterable = $true
                sortable = $true
                facetable = $true
              },
              @{
                name = 'metadata_storage_path'
                type = 'Edm.String'
                searchable = $false
                filterable = $true
                sortable = $true
              },
              @{
                name = 'metadata_content_type'
                type = 'Edm.String'
                searchable = $false
                filterable = $true
                sortable = $true
                facetable = $true
              },
              @{
                name = 'metadata_language'
                type = 'Edm.String'
                searchable = $false
                filterable = $true
                sortable = $true
                facetable = $true
              },
              @{
                name = 'metadata_author'
                type = 'Edm.String'
                searchable = $true
                filterable = $true
                sortable = $true
                facetable = $true
              },
              @{
                name = 'metadata_last_modified'
                type = 'Edm.DateTimeOffset'
                searchable = $false
                filterable = $true
                sortable = $true
                facetable = $false
              },
              @{
                name = 'metadata_creation_date'
                type = 'Edm.DateTimeOffset'
                searchable = $false
                filterable = $true
                sortable = $true
                facetable = $false
              },
              @{
                name = 'content'
                type = 'Edm.String'
                searchable = $true
                filterable = $false
                sortable = $false
                facetable = $false
                analyzer = 'standard.lucene'
              }
            )
          }
          $indexPayload = $indexDefinition | ConvertTo-Json -Depth 10
          $indexHeaders = @{
            'api-key' = $adminKey
            'Content-Type' = 'application/json'
          }
          Invoke-RestMethod -Uri \"https://$SearchServiceName.search.windows.net/indexes/$SearchIndexName`?api-version=2020-06-30\" -Method Put -Headers $indexHeaders -Body $indexPayload

          # Create indexer
          $indexerDefinition = @{
            name = $SearchIndexerName
            dataSourceName = $SearchDataSourceName
            targetIndexName = $SearchIndexName
            schedule = @{
              interval = 'PT1H'
            }
            parameters = @{
              batchSize = 100
              maxFailedItems = 10
              maxFailedItemsPerBatch = 10
              configuration = @{
                parsingMode = 'default'
                indexedFileNameExtensions = '.pdf,.docx,.doc,.pptx,.ppt,.xlsx,.xls,.txt,.html,.htm,.csv,.json,.xml'
                excludedFileNameExtensions = '.png,.jpg,.jpeg,.gif,.mp3,.mp4,.avi'
              }
            }
            fieldMappings = @(
              @{
                sourceFieldName = 'metadata_storage_path'
                targetFieldName = 'metadata_storage_path'
                mappingFunction = @{
                  name = 'base64Encode'
                }
              },
              @{
                sourceFieldName = 'metadata_storage_name'
                targetFieldName = 'metadata_storage_name'
              }
            )
            outputFieldMappings = @(
              @{
                sourceFieldName = 'content'
                targetFieldName = 'content'
              }
            )
          }
          $indexerPayload = $indexerDefinition | ConvertTo-Json -Depth 10
          $indexerHeaders = @{
            'api-key' = $adminKey
            'Content-Type' = 'application/json'
          }
          Invoke-RestMethod -Uri \"https://$SearchServiceName.search.windows.net/indexers/$SearchIndexerName`?api-version=2020-06-30\" -Method Put -Headers $indexerHeaders -Body $indexerPayload

          # Output the status information
          $DeploymentScriptOutputs = @{}
          $DeploymentScriptOutputs['searchServiceName'] = $SearchServiceName
          $DeploymentScriptOutputs['searchIndexName'] = $SearchIndexName
          $DeploymentScriptOutputs['searchIndexerName'] = $SearchIndexerName
          $DeploymentScriptOutputs['searchDataSourceName'] = $SearchDataSourceName
        ",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      }
    }
  ],
  "outputs": {
    "storageAccountName": {
      "type": "string",
      "value": "[parameters('storageAccountName')]"
    },
    "storageAccountId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
    },
    "blobEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))).primaryEndpoints.blob]"
    },
    "connectionString": {
      "type": "string",
      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value, ';EndpointSuffix=', environment().suffixes.storage)]"
    },
    "searchServiceName": {
      "type": "string",
      "value": "[parameters('searchServiceName')]"
    },
    "searchServiceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Search/searchServices', parameters('searchServiceName'))]"
    },
    "searchServiceEndpoint": {
      "type": "string",
      "value": "[concat('https://', parameters('searchServiceName'), '.search.windows.net')]"
    },
    "searchIndexName": {
      "type": "string",
      "value": "copindex"
    },
    "searchApiKey": {
      "type": "string",
      "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', parameters('searchServiceName')), '2021-04-01-preview').primaryKey]"
    }
  }
}