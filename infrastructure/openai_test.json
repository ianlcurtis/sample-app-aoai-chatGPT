{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('storage', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the storage account"
      },
      "minLength": 3,
      "maxLength": 24
    },
    "searchServiceName": {
      "type": "string",
      "defaultValue": "[concat('search', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Azure AI Search service"
      },
      "minLength": 2,
      "maxLength": 64
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[parameters('storageAccountName')]",
      "location": "uksouth",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "BlobStorage",
      "properties": {
        "accessTier": "Hot",
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false,
        "allowSharedKeyAccess": true,
        "defaultToOAuthAuthentication": false,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow",
          "ipRules": [],
          "virtualNetworkRules": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2022-09-01",
      "name": "[concat(parameters('storageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2022-09-01",
      "name": "[concat(parameters('storageAccountName'), '/default/data')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2021-04-01-preview",
      "name": "[parameters('searchServiceName')]",
      "location": "uksouth",
      "sku": {
        "name": "standard"
      },
      "properties": {
        "replicaCount": 1,
        "partitionCount": 1,
        "hostingMode": "default"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "searchIndexerSetup",
      "location": "uksouth",
      "dependsOn": [
        "[resourceId('Microsoft.Search/searchServices', parameters('searchServiceName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "kind": "AzurePowerShell",
      "properties": {
        "azPowerShellVersion": "7.5",
        "timeout": "PT30M",
        "arguments": "[format(' -SearchServiceName {0} -SearchServiceSku standard -SearchIndexName copindex -SearchIndexerName copindexer -SearchDataSourceName copdata -StorageAccountName {1} -StorageContainerName data -ResourceGroupName {2}', parameters('searchServiceName'), parameters('storageAccountName'), resourceGroup().name)]",
        "scriptContent": "param([string] $SearchServiceName,[string] $SearchServiceSku,[string] $SearchIndexName,[string] $SearchIndexerName,[string] $SearchDataSourceName,[string] $StorageAccountName,[string] $StorageContainerName,[string] $ResourceGroupName)\n\n# Get the search service admin API key\n$searchService = Get-AzResource -ResourceType 'Microsoft.Search/searchServices' -ResourceName $SearchServiceName -ResourceGroupName $ResourceGroupName\n$adminKey = (Invoke-AzRestMethod -Uri \"https://management.azure.com$($searchService.ResourceId)/listAdminKeys?api-version=2021-04-01-preview\" -Method Post).Content | ConvertFrom-Json | Select -ExpandProperty primaryKey\n\n# Get storage account key\n$storageKey = (Get-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName)[0].Value\n\n# Create data source\n$dataSourceDefinition = @{\n  name = $SearchDataSourceName\n  type = 'azureblob'\n  credentials = @{\n    connectionString = \"DefaultEndpointsProtocol=https;AccountName=$StorageAccountName;AccountKey=$storageKey;EndpointSuffix=core.windows.net\"\n  }\n  container = @{\n    name = $StorageContainerName\n  }\n}\n$dataSourcePayload = $dataSourceDefinition | ConvertTo-Json -Depth 10\n$dataSourceHeaders = @{\n  'api-key' = $adminKey\n  'Content-Type' = 'application/json'\n}\nInvoke-RestMethod -Uri \"https://$SearchServiceName.search.windows.net/datasources/$SearchDataSourceName`?api-version=2020-06-30\" -Method Put -Headers $dataSourceHeaders -Body $dataSourcePayload\n\n# Create index\n$indexDefinition = @{\n  name = $SearchIndexName\n  fields = @(\n    @{\n      name = 'id'\n      type = 'Edm.String'\n      key = $true\n      searchable = $false\n    },\n    @{\n      name = 'metadata_storage_name'\n      type = 'Edm.String'\n      searchable = $true\n      filterable = $true\n      sortable = $true\n      facetable = $true\n    },\n    @{\n      name = 'metadata_storage_path'\n      type = 'Edm.String'\n      searchable = $false\n      filterable = $true\n      sortable = $true\n    },\n    @{\n      name = 'metadata_content_type'\n      type = 'Edm.String'\n      searchable = $false\n      filterable = $true\n      sortable = $true\n      facetable = $true\n    },\n    @{\n      name = 'metadata_language'\n      type = 'Edm.String'\n      searchable = $false\n      filterable = $true\n      sortable = $true\n      facetable = $true\n    },\n    @{\n      name = 'metadata_author'\n      type = 'Edm.String'\n      searchable = $true\n      filterable = $true\n      sortable = $true\n      facetable = $true\n    },\n    @{\n      name = 'metadata_last_modified'\n      type = 'Edm.DateTimeOffset'\n      searchable = $false\n      filterable = $true\n      sortable = $true\n      facetable = $false\n    },\n    @{\n      name = 'metadata_creation_date'\n      type = 'Edm.DateTimeOffset'\n      searchable = $false\n      filterable = $true\n      sortable = $true\n      facetable = $false\n    },\n    @{\n      name = 'content'\n      type = 'Edm.String'\n      searchable = $true\n      filterable = $false\n      sortable = $false\n      facetable = $false\n      analyzer = 'standard.lucene'\n    }\n  )\n}\n$indexPayload = $indexDefinition | ConvertTo-Json -Depth 10\n$indexHeaders = @{\n  'api-key' = $adminKey\n  'Content-Type' = 'application/json'\n}\nInvoke-RestMethod -Uri \"https://$SearchServiceName.search.windows.net/indexes/$SearchIndexName`?api-version=2020-06-30\" -Method Put -Headers $indexHeaders -Body $indexPayload\n\n# Create indexer\n$indexerDefinition = @{\n  name = $SearchIndexerName\n  dataSourceName = $SearchDataSourceName\n  targetIndexName = $SearchIndexName\n  schedule = @{\n    interval = 'PT1H'\n  }\n  parameters = @{\n    batchSize = 100\n    maxFailedItems = 10\n    maxFailedItemsPerBatch = 10\n    configuration = @{\n      parsingMode = 'default'\n      indexedFileNameExtensions = '.pdf,.docx,.doc,.pptx,.ppt,.xlsx,.xls,.txt,.html,.htm,.csv,.json,.xml'\n      excludedFileNameExtensions = '.png,.jpg,.jpeg,.gif,.mp3,.mp4,.avi'\n    }\n  }\n  fieldMappings = @(\n    @{\n      sourceFieldName = 'metadata_storage_path'\n      targetFieldName = 'metadata_storage_path'\n      mappingFunction = @{\n        name = 'base64Encode'\n      }\n    },\n    @{\n      sourceFieldName = 'metadata_storage_name'\n      targetFieldName = 'metadata_storage_name'\n    }\n  )\n  outputFieldMappings = @(\n    @{\n      sourceFieldName = 'content'\n      targetFieldName = 'content'\n    }\n  )\n}\n$indexerPayload = $indexerDefinition | ConvertTo-Json -Depth 10\n$indexerHeaders = @{\n  'api-key' = $adminKey\n  'Content-Type' = 'application/json'\n}\nInvoke-RestMethod -Uri \"https://$SearchServiceName.search.windows.net/indexers/$SearchIndexerName`?api-version=2020-06-30\" -Method Put -Headers $indexerHeaders -Body $indexerPayload\n\n# Output the status information\n$DeploymentScriptOutputs = @{}\n$DeploymentScriptOutputs['searchServiceName'] = $SearchServiceName\n$DeploymentScriptOutputs['searchIndexName'] = $SearchIndexName\n$DeploymentScriptOutputs['searchIndexerName'] = $SearchIndexerName\n$DeploymentScriptOutputs['searchDataSourceName'] = $SearchDataSourceName",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      }
    }
  ],
  "outputs": {
    "storageAccountName": {
      "type": "string",
      "value": "[parameters('storageAccountName')]"
    },
    "storageAccountId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
    },
    "blobEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))).primaryEndpoints.blob]"
    },
    "connectionString": {
      "type": "string",
      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value, ';EndpointSuffix=', environment().suffixes.storage)]"
    },
    "searchServiceName": {
      "type": "string",
      "value": "[parameters('searchServiceName')]"
    },
    "searchServiceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Search/searchServices', parameters('searchServiceName'))]"
    },
    "searchServiceEndpoint": {
      "type": "string",
      "value": "[concat('https://', parameters('searchServiceName'), '.search.windows.net')]"
    },
    "searchIndexName": {
      "type": "string",
      "value": "copindex"
    },
    "searchApiKey": {
      "type": "string",
      "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', parameters('searchServiceName')), '2021-04-01-preview').primaryKey]"
    }
  }
}