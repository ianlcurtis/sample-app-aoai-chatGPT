{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "4993740717045331762"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the the environment which is used to generate a short unique hash used in all resources."
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": ""
    },
    "backendServiceName": {
      "type": "string",
      "defaultValue": ""
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "searchServiceName": {
      "type": "string",
      "defaultValue": ""
    },
    "searchServiceResourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "searchServiceResourceGroupLocation": {
      "type": "string",
      "defaultValue": "[parameters('location')]"
    },
    "searchServiceSkuName": {
      "type": "string",
      "defaultValue": ""
    },
    "searchIndexName": {
      "type": "string",
      "defaultValue": "gptkbindex"
    },
    "searchUseSemanticSearch": {
      "type": "bool",
      "defaultValue": false
    },
    "searchSemanticSearchConfig": {
      "type": "string",
      "defaultValue": "default"
    },
    "searchTopK": {
      "type": "int",
      "defaultValue": 5
    },
    "searchEnableInDomain": {
      "type": "bool",
      "defaultValue": true
    },
    "searchContentColumns": {
      "type": "string",
      "defaultValue": "content"
    },
    "searchFilenameColumn": {
      "type": "string",
      "defaultValue": "filepath"
    },
    "searchTitleColumn": {
      "type": "string",
      "defaultValue": "title"
    },
    "searchUrlColumn": {
      "type": "string",
      "defaultValue": "url"
    },
    "openAiResourceName": {
      "type": "string",
      "defaultValue": ""
    },
    "openAiResourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "openAiResourceGroupLocation": {
      "type": "string",
      "defaultValue": "[parameters('location')]"
    },
    "openAiSkuName": {
      "type": "string",
      "defaultValue": ""
    },
    "openAIModel": {
      "type": "string",
      "defaultValue": "turbo16k"
    },
    "openAIModelName": {
      "type": "string",
      "defaultValue": "gpt-35-turbo-16k"
    },
    "openAITemperature": {
      "type": "int",
      "defaultValue": 0
    },
    "openAITopP": {
      "type": "int",
      "defaultValue": 1
    },
    "openAIMaxTokens": {
      "type": "int",
      "defaultValue": 1000
    },
    "openAIStopSequence": {
      "type": "string",
      "defaultValue": ""
    },
    "openAISystemMessage": {
      "type": "string",
      "defaultValue": "You are an AI assistant that helps people find information."
    },
    "openAIStream": {
      "type": "bool",
      "defaultValue": true
    },
    "embeddingDeploymentName": {
      "type": "string",
      "defaultValue": "embedding"
    },
    "embeddingModelName": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002"
    },
    "formRecognizerServiceName": {
      "type": "string",
      "defaultValue": ""
    },
    "formRecognizerResourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "formRecognizerResourceGroupLocation": {
      "type": "string",
      "defaultValue": "[parameters('location')]"
    },
    "formRecognizerSkuName": {
      "type": "string",
      "defaultValue": ""
    },
    "authClientId": {
      "type": "string"
    },
    "authClientSecret": {
      "type": "securestring"
    },
    "cosmosAccountName": {
      "type": "string",
      "defaultValue": ""
    },
    "principalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Id of the user or app to assign application roles"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "analysisServicesServers": "as",
      "apiManagementService": "apim-",
      "appConfigurationConfigurationStores": "appcs-",
      "appManagedEnvironments": "cae-",
      "appContainerApps": "ca-",
      "authorizationPolicyDefinitions": "policy-",
      "automationAutomationAccounts": "aa-",
      "blueprintBlueprints": "bp-",
      "blueprintBlueprintsArtifacts": "bpa-",
      "cacheRedis": "redis-",
      "cdnProfiles": "cdnp-",
      "cdnProfilesEndpoints": "cdne-",
      "cognitiveServicesAccounts": "cog-",
      "cognitiveServicesFormRecognizer": "cog-fr-",
      "cognitiveServicesTextAnalytics": "cog-ta-",
      "computeAvailabilitySets": "avail-",
      "computeCloudServices": "cld-",
      "computeDiskEncryptionSets": "des",
      "computeDisks": "disk",
      "computeDisksOs": "osdisk",
      "computeGalleries": "gal",
      "computeSnapshots": "snap-",
      "computeVirtualMachines": "vm",
      "computeVirtualMachineScaleSets": "vmss-",
      "containerInstanceContainerGroups": "ci",
      "containerRegistryRegistries": "cr",
      "containerServiceManagedClusters": "aks-",
      "databricksWorkspaces": "dbw-",
      "dataFactoryFactories": "adf-",
      "dataLakeAnalyticsAccounts": "dla",
      "dataLakeStoreAccounts": "dls",
      "dataMigrationServices": "dms-",
      "dBforMySQLServers": "mysql-",
      "dBforPostgreSQLServers": "psql-",
      "devicesIotHubs": "iot-",
      "devicesProvisioningServices": "provs-",
      "devicesProvisioningServicesCertificates": "pcert-",
      "documentDBDatabaseAccounts": "cosmos-",
      "eventGridDomains": "evgd-",
      "eventGridDomainsTopics": "evgt-",
      "eventGridEventSubscriptions": "evgs-",
      "eventHubNamespaces": "evhns-",
      "eventHubNamespacesEventHubs": "evh-",
      "hdInsightClustersHadoop": "hadoop-",
      "hdInsightClustersHbase": "hbase-",
      "hdInsightClustersKafka": "kafka-",
      "hdInsightClustersMl": "mls-",
      "hdInsightClustersSpark": "spark-",
      "hdInsightClustersStorm": "storm-",
      "hybridComputeMachines": "arcs-",
      "insightsActionGroups": "ag-",
      "insightsComponents": "appi-",
      "keyVaultVaults": "kv-",
      "kubernetesConnectedClusters": "arck",
      "kustoClusters": "dec",
      "kustoClustersDatabases": "dedb",
      "logicIntegrationAccounts": "ia-",
      "logicWorkflows": "logic-",
      "machineLearningServicesWorkspaces": "mlw-",
      "managedIdentityUserAssignedIdentities": "id-",
      "managementManagementGroups": "mg-",
      "migrateAssessmentProjects": "migr-",
      "networkApplicationGateways": "agw-",
      "networkApplicationSecurityGroups": "asg-",
      "networkAzureFirewalls": "afw-",
      "networkBastionHosts": "bas-",
      "networkConnections": "con-",
      "networkDnsZones": "dnsz-",
      "networkExpressRouteCircuits": "erc-",
      "networkFirewallPolicies": "afwp-",
      "networkFirewallPoliciesWebApplication": "waf",
      "networkFirewallPoliciesRuleGroups": "wafrg",
      "networkFrontDoors": "fd-",
      "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
      "networkLoadBalancersExternal": "lbe-",
      "networkLoadBalancersInternal": "lbi-",
      "networkLoadBalancersInboundNatRules": "rule-",
      "networkLocalNetworkGateways": "lgw-",
      "networkNatGateways": "ng-",
      "networkNetworkInterfaces": "nic-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
      "networkNetworkWatchers": "nw-",
      "networkPrivateDnsZones": "pdnsz-",
      "networkPrivateLinkServices": "pl-",
      "networkPublicIPAddresses": "pip-",
      "networkPublicIPPrefixes": "ippre-",
      "networkRouteFilters": "rf-",
      "networkRouteTables": "rt-",
      "networkRouteTablesRoutes": "udr-",
      "networkTrafficManagerProfiles": "traf-",
      "networkVirtualNetworkGateways": "vgw-",
      "networkVirtualNetworks": "vnet-",
      "networkVirtualNetworksSubnets": "snet-",
      "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
      "networkVirtualWans": "vwan-",
      "networkVpnGateways": "vpng-",
      "networkVpnGatewaysVpnConnections": "vcn-",
      "networkVpnGatewaysVpnSites": "vst-",
      "notificationHubsNamespaces": "ntfns-",
      "notificationHubsNamespacesNotificationHubs": "ntf-",
      "operationalInsightsWorkspaces": "log-",
      "portalDashboards": "dash-",
      "powerBIDedicatedCapacities": "pbi-",
      "purviewAccounts": "pview-",
      "recoveryServicesVaults": "rsv-",
      "resourcesResourceGroups": "rg-",
      "searchSearchServices": "srch-",
      "serviceBusNamespaces": "sb-",
      "serviceBusNamespacesQueues": "sbq-",
      "serviceBusNamespacesTopics": "sbt-",
      "serviceEndPointPolicies": "se-",
      "serviceFabricClusters": "sf-",
      "signalRServiceSignalR": "sigr",
      "sqlManagedInstances": "sqlmi-",
      "sqlServers": "sql-",
      "sqlServersDataWarehouse": "sqldw-",
      "sqlServersDatabases": "sqldb-",
      "sqlServersDatabasesStretch": "sqlstrdb-",
      "storageStorageAccounts": "st",
      "storageStorageAccountsVm": "stvm",
      "storSimpleManagers": "ssimp",
      "streamAnalyticsCluster": "asa-",
      "synapseWorkspaces": "syn",
      "synapseWorkspacesAnalyticsWorkspaces": "synw",
      "synapseWorkspacesSqlPoolsDedicated": "syndp",
      "synapseWorkspacesSqlPoolsSpark": "synsp",
      "timeSeriesInsightsEnvironments": "tsi-",
      "webServerFarms": "plan-",
      "webSitesAppService": "app-",
      "webSitesAppServiceEnvironment": "ase-",
      "webSitesFunctions": "func-",
      "webStaticSites": "stapp-"
    },
    "abbrs": "[variables('$fxv#0')]",
    "resourceToken": "[toLower(uniqueString(subscription().id, parameters('environmentName'), parameters('location')))]",
    "tags": {
      "azd-env-name": "[parameters('environmentName')]"
    },
    "appServiceName": "[if(not(empty(parameters('backendServiceName'))), parameters('backendServiceName'), format('{0}backend-{1}', variables('abbrs').webSitesAppService, variables('resourceToken')))]",
    "authIssuerUri": "[format('{0}{1}/v2.0', environment().authentication.loginEndpoint, tenant().tenantId)]"
  },
  "resources": {
    "resourceGroup": {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    "openAiResourceGroup": {
      "condition": "[not(empty(parameters('openAiResourceGroupName')))]",
      "existing": true,
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
      "dependsOn": [
        "resourceGroup"
      ]
    },
    "searchServiceResourceGroup": {
      "condition": "[not(empty(parameters('searchServiceResourceGroupName')))]",
      "existing": true,
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
      "dependsOn": [
        "resourceGroup"
      ]
    },
    "appServicePlan": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appserviceplan",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('appServicePlanName'))), createObject('value', parameters('appServicePlanName')), createObject('value', format('{0}{1}', variables('abbrs').webServerFarms, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "B1",
              "capacity": 1
            }
          },
          "kind": {
            "value": "linux"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "6152380904852528851"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "kind": {
              "type": "string",
              "defaultValue": ""
            },
            "reserved": {
              "type": "bool",
              "defaultValue": true
            },
            "sku": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "reserved": "[parameters('reserved')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "resourceGroup"
      ]
    },
    "backend": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "web",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('appServiceName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[union(variables('tags'), createObject('azd-service-name', 'backend'))]"
          },
          "appServicePlanId": {
            "value": "[reference('appServicePlan').outputs.id.value]"
          },
          "runtimeName": {
            "value": "python"
          },
          "runtimeVersion": {
            "value": "3.10"
          },
          "scmDoBuildDuringDeployment": {
            "value": true
          },
          "managedIdentity": {
            "value": true
          },
          "authClientSecret": {
            "value": "[parameters('authClientSecret')]"
          },
          "authClientId": {
            "value": "[parameters('authClientId')]"
          },
          "authIssuerUri": {
            "value": "[variables('authIssuerUri')]"
          },
          "appSettings": {
            "value": {
              "AZURE_SEARCH_INDEX": "[parameters('searchIndexName')]",
              "AZURE_SEARCH_SERVICE": "[reference('searchService').outputs.name.value]",
              "AZURE_SEARCH_KEY": "[reference('searchService').outputs.adminKey.value]",
              "AZURE_SEARCH_USE_SEMANTIC_SEARCH": "[parameters('searchUseSemanticSearch')]",
              "AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG": "[parameters('searchSemanticSearchConfig')]",
              "AZURE_SEARCH_TOP_K": "[parameters('searchTopK')]",
              "AZURE_SEARCH_ENABLE_IN_DOMAIN": "[parameters('searchEnableInDomain')]",
              "AZURE_SEARCH_CONTENT_COLUMNS": "[parameters('searchContentColumns')]",
              "AZURE_SEARCH_FILENAME_COLUMN": "[parameters('searchFilenameColumn')]",
              "AZURE_SEARCH_TITLE_COLUMN": "[parameters('searchTitleColumn')]",
              "AZURE_SEARCH_URL_COLUMN": "[parameters('searchUrlColumn')]",
              "AZURE_OPENAI_RESOURCE": "[reference('openAi').outputs.name.value]",
              "AZURE_OPENAI_MODEL": "[parameters('openAIModel')]",
              "AZURE_OPENAI_MODEL_NAME": "[parameters('openAIModelName')]",
              "AZURE_OPENAI_KEY": "[reference('openAi').outputs.key.value]",
              "AZURE_OPENAI_TEMPERATURE": "[parameters('openAITemperature')]",
              "AZURE_OPENAI_TOP_P": "[parameters('openAITopP')]",
              "AZURE_OPENAI_MAX_TOKENS": "[parameters('openAIMaxTokens')]",
              "AZURE_OPENAI_STOP_SEQUENCE": "[parameters('openAIStopSequence')]",
              "AZURE_OPENAI_SYSTEM_MESSAGE": "[parameters('openAISystemMessage')]",
              "AZURE_OPENAI_STREAM": "[parameters('openAIStream')]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7441425159789076875"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "applicationInsightsName": {
              "type": "string",
              "defaultValue": ""
            },
            "appServicePlanId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "managedIdentity": {
              "type": "bool",
              "defaultValue": "[not(empty(parameters('keyVaultName')))]"
            },
            "runtimeName": {
              "type": "string",
              "allowedValues": [
                "dotnet",
                "dotnetcore",
                "dotnet-isolated",
                "node",
                "python",
                "java",
                "powershell",
                "custom"
              ]
            },
            "runtimeNameAndVersion": {
              "type": "string",
              "defaultValue": "[format('{0}|{1}', parameters('runtimeName'), parameters('runtimeVersion'))]"
            },
            "runtimeVersion": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "app,linux"
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": []
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "appCommandLine": {
              "type": "string",
              "defaultValue": ""
            },
            "appSettings": {
              "type": "object",
              "defaultValue": {}
            },
            "authClientId": {
              "type": "string"
            },
            "authClientSecret": {
              "type": "securestring"
            },
            "authIssuerUri": {
              "type": "string"
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "enableOryxBuild": {
              "type": "bool",
              "defaultValue": "[contains(parameters('kind'), 'linux')]"
            },
            "functionAppScaleLimit": {
              "type": "int",
              "defaultValue": -1
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "[parameters('runtimeNameAndVersion')]"
            },
            "minimumElasticInstanceCount": {
              "type": "int",
              "defaultValue": -1
            },
            "numberOfWorkers": {
              "type": "int",
              "defaultValue": -1
            },
            "scmDoBuildDuringDeployment": {
              "type": "bool",
              "defaultValue": false
            },
            "use32BitWorkerProcess": {
              "type": "bool",
              "defaultValue": false
            },
            "ftpsState": {
              "type": "string",
              "defaultValue": "FtpsOnly"
            },
            "healthCheckPath": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('name'), 'appsettings')]",
              "properties": "[union(parameters('appSettings'), createObject('SCM_DO_BUILD_DURING_DEPLOYMENT', string(parameters('scmDoBuildDuringDeployment')), 'ENABLE_ORYX_BUILD', string(parameters('enableOryxBuild'))), if(not(empty(parameters('applicationInsightsName'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString), createObject()), if(not(empty(parameters('keyVaultName'))), createObject('AZURE_KEY_VAULT_ENDPOINT', reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri), createObject()), if(not(empty(parameters('authClientSecret'))), createObject('AUTH_CLIENT_SECRET', parameters('authClientSecret')), createObject()))]",
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('name'), 'logs')]",
              "properties": {
                "applicationLogs": {
                  "fileSystem": {
                    "level": "Verbose"
                  }
                },
                "detailedErrorMessages": {
                  "enabled": true
                },
                "failedRequestsTracing": {
                  "enabled": true
                },
                "httpLogs": {
                  "fileSystem": {
                    "enabled": true,
                    "retentionInDays": 1,
                    "retentionInMb": 35
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]",
                "[resourceId('Microsoft.Web/sites/config', parameters('name'), 'appsettings')]"
              ]
            },
            {
              "condition": "[not(empty(parameters('authClientId')))]",
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('name'), 'authsettingsV2')]",
              "properties": {
                "globalValidation": {
                  "requireAuthentication": true,
                  "unauthenticatedClientAction": "RedirectToLoginPage",
                  "redirectToProvider": "azureactivedirectory"
                },
                "identityProviders": {
                  "azureActiveDirectory": {
                    "enabled": true,
                    "registration": {
                      "clientId": "[parameters('authClientId')]",
                      "clientSecretSettingName": "AUTH_CLIENT_SECRET",
                      "openIdIssuer": "[parameters('authIssuerUri')]"
                    },
                    "validation": {
                      "defaultAuthorizationPolicy": {
                        "allowedApplications": []
                      }
                    }
                  }
                },
                "login": {
                  "tokenStore": {
                    "enabled": true
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "linuxFxVersion": "[parameters('linuxFxVersion')]",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "ftpsState": "[parameters('ftpsState')]",
                  "appCommandLine": "[parameters('appCommandLine')]",
                  "numberOfWorkers": "[if(not(equals(parameters('numberOfWorkers'), -1)), parameters('numberOfWorkers'), null())]",
                  "minimumElasticInstanceCount": "[if(not(equals(parameters('minimumElasticInstanceCount'), -1)), parameters('minimumElasticInstanceCount'), null())]",
                  "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
                  "functionAppScaleLimit": "[if(not(equals(parameters('functionAppScaleLimit'), -1)), parameters('functionAppScaleLimit'), null())]",
                  "healthCheckPath": "[parameters('healthCheckPath')]",
                  "cors": {
                    "allowedOrigins": "[union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins'))]"
                  }
                },
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "httpsOnly": true
              },
              "identity": {
                "type": "[if(parameters('managedIdentity'), 'SystemAssigned', 'None')]"
              }
            }
          ],
          "outputs": {
            "identityPrincipalId": {
              "type": "string",
              "value": "[if(parameters('managedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01', 'full').identity.principalId, '')]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01').defaultHostName)]"
            }
          }
        }
      },
      "dependsOn": [
        "appServicePlan",
        "openAi",
        "resourceGroup",
        "searchService"
      ]
    },
    "openAi": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai",
      "resourceGroup": "[if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('openAiResourceName'))), createObject('value', parameters('openAiResourceName')), createObject('value', format('{0}{1}', variables('abbrs').cognitiveServicesAccounts, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('openAiResourceGroupLocation')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "[if(not(empty(parameters('openAiSkuName'))), parameters('openAiSkuName'), 'S0')]"
            }
          },
          "deployments": {
            "value": [
              {
                "name": "[parameters('openAIModel')]",
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('openAIModelName')]",
                  "version": "0613"
                },
                "capacity": 30
              },
              {
                "name": "[parameters('embeddingDeploymentName')]",
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('embeddingModelName')]",
                  "version": "2"
                },
                "capacity": 30
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "3021473135511393637"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "customSubDomainName": {
              "type": "string",
              "defaultValue": "[parameters('name')]"
            },
            "deployments": {
              "type": "array",
              "defaultValue": []
            },
            "kind": {
              "type": "string",
              "defaultValue": "OpenAI"
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "S0"
              }
            }
          },
          "resources": {
            "account": {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "customSubDomainName": "[parameters('customSubDomainName')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
              },
              "sku": "[parameters('sku')]"
            },
            "deployment": {
              "copy": {
                "name": "deployment",
                "count": "[length(parameters('deployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), parameters('deployments')[copyIndex()].name)]",
              "properties": {
                "model": "[parameters('deployments')[copyIndex()].model]",
                "raiPolicyName": "[if(contains(parameters('deployments')[copyIndex()], 'raiPolicyName'), parameters('deployments')[copyIndex()].raiPolicyName, null())]"
              },
              "sku": {
                "name": "Standard",
                "capacity": "[parameters('deployments')[copyIndex()].capacity]"
              },
              "dependsOn": [
                "account"
              ]
            }
          },
          "outputs": {
            "endpoint": {
              "type": "string",
              "value": "[reference('account').endpoint]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "skuName": {
              "type": "string",
              "value": "[reference('account', '2023-05-01', 'full').sku.name]"
            },
            "key": {
              "type": "string",
              "value": "[listKeys('account', '2023-05-01').key1]"
            }
          }
        }
      },
      "dependsOn": [
        "resourceGroup"
      ]
    },
    "searchService": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-service",
      "resourceGroup": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('searchServiceName'))), createObject('value', parameters('searchServiceName')), createObject('value', format('gptkb-{0}', variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('searchServiceResourceGroupLocation')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "authOptions": {
            "value": {
              "aadOrApiKey": {
                "aadAuthFailureMode": "http401WithBearerChallenge"
              }
            }
          },
          "sku": {
            "value": {
              "name": "[if(not(empty(parameters('searchServiceSkuName'))), parameters('searchServiceSkuName'), 'standard')]"
            }
          },
          "semanticSearch": {
            "value": "free"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "6988488843638642504"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "standard"
              }
            },
            "authOptions": {
              "type": "object",
              "defaultValue": {}
            },
            "semanticSearch": {
              "type": "string",
              "defaultValue": "disabled"
            }
          },
          "resources": {
            "search": {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2021-04-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "authOptions": "[parameters('authOptions')]",
                "disableLocalAuth": false,
                "disabledDataExfiltrationOptions": [],
                "encryptionWithCmk": {
                  "enforcement": "Unspecified"
                },
                "hostingMode": "default",
                "networkRuleSet": {
                  "bypass": "None",
                  "ipRules": []
                },
                "partitionCount": 1,
                "publicNetworkAccess": "Enabled",
                "replicaCount": 1,
                "semanticSearch": "[parameters('semanticSearch')]"
              },
              "sku": "[parameters('sku')]"
            }
          },
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Search/searchServices', parameters('name'))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[format('https://{0}.search.windows.net/', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "skuName": {
              "type": "string",
              "value": "[parameters('sku').name]"
            },
            "adminKey": {
              "type": "string",
              "value": "[listAdminKeys('search', '2021-04-01-preview').primaryKey]"
            }
          }
        }
      },
      "dependsOn": [
        "resourceGroup"
      ]
    },
    "cosmos": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmos",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "accountName": "[if(not(empty(parameters('cosmosAccountName'))), createObject('value', parameters('cosmosAccountName')), createObject('value', format('{0}{1}', variables('abbrs').documentDBDatabaseAccounts, variables('resourceToken'))))]",
          "location": {
            "value": "[reference('resourceGroup', '2021-04-01', 'full').location]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "principalIds": {
            "value": [
              "[parameters('principalId')]",
              "[reference('backend').outputs.identityPrincipalId.value]"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "10241322067043228945"
            }
          },
          "parameters": {
            "accountName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "db_conversation_history"
            },
            "collectionName": {
              "type": "string",
              "defaultValue": "conversations"
            },
            "principalIds": {
              "type": "array",
              "defaultValue": []
            },
            "containers": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "[parameters('collectionName')]",
                  "id": "[parameters('collectionName')]",
                  "partitionKey": "/userId"
                }
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "cosmos-sql",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "accountName": {
                    "value": "[parameters('accountName')]"
                  },
                  "databaseName": {
                    "value": "[parameters('databaseName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "containers": {
                    "value": "[parameters('containers')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "principalIds": {
                    "value": "[parameters('principalIds')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "7017360910442118846"
                    },
                    "description": "Creates an Azure Cosmos DB for NoSQL account with a database."
                  },
                  "parameters": {
                    "accountName": {
                      "type": "string"
                    },
                    "databaseName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "containers": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "principalIds": {
                      "type": "array",
                      "defaultValue": []
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "database::list",
                        "count": "[length(parameters('containers'))]"
                      },
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                      "apiVersion": "2022-05-15",
                      "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1], parameters('containers')[copyIndex()].name)]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('containers')[copyIndex()].id]",
                          "partitionKey": {
                            "paths": [
                              "[parameters('containers')[copyIndex()].partitionKey]"
                            ]
                          }
                        },
                        "options": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1])]"
                      ]
                    },
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                      "apiVersion": "2022-05-15",
                      "name": "[format('{0}/{1}', parameters('accountName'), parameters('databaseName'))]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('databaseName')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'cosmos-sql-account')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "cosmos-sql-account",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('accountName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "17902951962518349695"
                            },
                            "description": "Creates an Azure Cosmos DB for NoSQL account."
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "cosmos-account",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "kind": {
                                    "value": "GlobalDocumentDB"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "11806186492470863293"
                                    },
                                    "description": "Creates an Azure Cosmos DB account."
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]"
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {}
                                    },
                                    "kind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "GlobalDocumentDB",
                                        "MongoDB",
                                        "Parse"
                                      ]
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.DocumentDB/databaseAccounts",
                                      "apiVersion": "2022-08-15",
                                      "name": "[parameters('name')]",
                                      "kind": "[parameters('kind')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "consistencyPolicy": {
                                          "defaultConsistencyLevel": "Session"
                                        },
                                        "locations": [
                                          {
                                            "locationName": "[parameters('location')]",
                                            "failoverPriority": 0,
                                            "isZoneRedundant": false
                                          }
                                        ],
                                        "databaseAccountOfferType": "Standard",
                                        "enableAutomaticFailover": false,
                                        "enableMultipleWriteLocations": false,
                                        "apiProperties": "[if(equals(parameters('kind'), 'MongoDB'), createObject('serverVersion', '4.0'), createObject())]",
                                        "capabilities": [
                                          {
                                            "name": "EnableServerless"
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "endpoint": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '2022-08-15').documentEndpoint]"
                                    },
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "endpoint": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-account'), '2022-09-01').outputs.endpoint.value]"
                            },
                            "id": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-account'), '2022-09-01').outputs.id.value]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-account'), '2022-09-01').outputs.name.value]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "cosmos-sql-role-definition",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "accountName": {
                            "value": "[parameters('accountName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "17849580883124255315"
                            },
                            "description": "Creates a SQL role definition under an Azure Cosmos DB account."
                          },
                          "parameters": {
                            "accountName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
                              "apiVersion": "2022-08-15",
                              "name": "[format('{0}/{1}', parameters('accountName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName')), parameters('accountName'), 'sql-role'))]",
                              "properties": {
                                "assignableScopes": [
                                  "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
                                ],
                                "permissions": [
                                  {
                                    "dataActions": [
                                      "Microsoft.DocumentDB/databaseAccounts/readMetadata",
                                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/*",
                                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/*"
                                    ],
                                    "notDataActions": []
                                  }
                                ],
                                "roleName": "Reader Writer",
                                "type": "CustomRole"
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('accountName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName')), parameters('accountName'), 'sql-role'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'cosmos-sql-account')]",
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1])]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "userRole",
                        "count": "[length(parameters('principalIds'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[not(empty(parameters('principalIds')[copyIndex()]))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('cosmos-sql-user-role-{0}', uniqueString(parameters('principalIds')[copyIndex()]))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "accountName": {
                            "value": "[parameters('accountName')]"
                          },
                          "roleDefinitionId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql-role-definition'), '2022-09-01').outputs.id.value]"
                          },
                          "principalId": {
                            "value": "[parameters('principalIds')[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "399023243105742355"
                            },
                            "description": "Creates a SQL role assignment under an Azure Cosmos DB account."
                          },
                          "parameters": {
                            "accountName": {
                              "type": "string"
                            },
                            "roleDefinitionId": {
                              "type": "string"
                            },
                            "principalId": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                              "apiVersion": "2022-05-15",
                              "name": "[format('{0}/{1}', parameters('accountName'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))))]",
                              "properties": {
                                "principalId": "[parameters('principalId')]",
                                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'cosmos-sql-account')]",
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1])]",
                        "[resourceId('Microsoft.Resources/deployments', 'cosmos-sql-role-definition')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "accountId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql-account'), '2022-09-01').outputs.id.value]"
                    },
                    "accountName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql-account'), '2022-09-01').outputs.name.value]"
                    },
                    "databaseName": {
                      "type": "string",
                      "value": "[parameters('databaseName')]"
                    },
                    "endpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql-account'), '2022-09-01').outputs.endpoint.value]"
                    },
                    "roleDefinitionId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql-role-definition'), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "databaseName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql'), '2022-09-01').outputs.databaseName.value]"
            },
            "containerName": {
              "type": "string",
              "value": "[parameters('containers')[0].name]"
            },
            "accountName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql'), '2022-09-01').outputs.accountName.value]"
            },
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos-sql'), '2022-09-01').outputs.endpoint.value]"
            }
          }
        }
      },
      "dependsOn": [
        "backend",
        "resourceGroup"
      ]
    },
    "openAiRoleUser": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai-role-user",
      "resourceGroup": "[if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "roleDefinitionId": {
            "value": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd"
          },
          "principalType": {
            "value": "User"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "14607554765285051200"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "resourceGroup"
      ]
    },
    "searchRoleUser": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-role-user",
      "resourceGroup": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "roleDefinitionId": {
            "value": "1407120a-92aa-4202-b7e9-c0e197c71c8f"
          },
          "principalType": {
            "value": "User"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "14607554765285051200"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "resourceGroup"
      ]
    },
    "searchIndexDataContribRoleUser": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-index-data-contrib-role-user",
      "resourceGroup": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "roleDefinitionId": {
            "value": "8ebe5a00-799e-43f5-93ac-243d3dce84a7"
          },
          "principalType": {
            "value": "User"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "14607554765285051200"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "resourceGroup"
      ]
    },
    "searchServiceContribRoleUser": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-service-contrib-role-user",
      "resourceGroup": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "roleDefinitionId": {
            "value": "7ca78c08-252a-4471-8644-bb5ff32d4ba0"
          },
          "principalType": {
            "value": "User"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "14607554765285051200"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "resourceGroup"
      ]
    },
    "openAiRoleBackend": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai-role-backend",
      "resourceGroup": "[if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference('backend').outputs.identityPrincipalId.value]"
          },
          "roleDefinitionId": {
            "value": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd"
          },
          "principalType": {
            "value": "ServicePrincipal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "14607554765285051200"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "backend",
        "resourceGroup"
      ]
    },
    "searchRoleBackend": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-role-backend",
      "resourceGroup": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference('backend').outputs.identityPrincipalId.value]"
          },
          "roleDefinitionId": {
            "value": "1407120a-92aa-4202-b7e9-c0e197c71c8f"
          },
          "principalType": {
            "value": "ServicePrincipal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "14607554765285051200"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "backend",
        "resourceGroup"
      ]
    },
    "docPrepResources": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('docprep-resources{0}', variables('resourceToken'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceToken": {
            "value": "[variables('resourceToken')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "resourceGroupName": {
            "value": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
          },
          "formRecognizerServiceName": {
            "value": "[parameters('formRecognizerServiceName')]"
          },
          "formRecognizerResourceGroupName": {
            "value": "[parameters('formRecognizerResourceGroupName')]"
          },
          "formRecognizerResourceGroupLocation": {
            "value": "[parameters('formRecognizerResourceGroupLocation')]"
          },
          "formRecognizerSkuName": "[if(not(empty(parameters('formRecognizerSkuName'))), createObject('value', parameters('formRecognizerSkuName')), createObject('value', 'S0'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7010208607102037575"
            }
          },
          "parameters": {
            "resourceGroupName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "principalId": {
              "type": "string"
            },
            "resourceToken": {
              "type": "string"
            },
            "formRecognizerServiceName": {
              "type": "string",
              "defaultValue": ""
            },
            "formRecognizerResourceGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "formRecognizerResourceGroupLocation": {
              "type": "string",
              "defaultValue": "[parameters('location')]"
            },
            "formRecognizerSkuName": {
              "type": "string",
              "defaultValue": "S0"
            }
          },
          "variables": {
            "$fxv#0": {
              "analysisServicesServers": "as",
              "apiManagementService": "apim-",
              "appConfigurationConfigurationStores": "appcs-",
              "appManagedEnvironments": "cae-",
              "appContainerApps": "ca-",
              "authorizationPolicyDefinitions": "policy-",
              "automationAutomationAccounts": "aa-",
              "blueprintBlueprints": "bp-",
              "blueprintBlueprintsArtifacts": "bpa-",
              "cacheRedis": "redis-",
              "cdnProfiles": "cdnp-",
              "cdnProfilesEndpoints": "cdne-",
              "cognitiveServicesAccounts": "cog-",
              "cognitiveServicesFormRecognizer": "cog-fr-",
              "cognitiveServicesTextAnalytics": "cog-ta-",
              "computeAvailabilitySets": "avail-",
              "computeCloudServices": "cld-",
              "computeDiskEncryptionSets": "des",
              "computeDisks": "disk",
              "computeDisksOs": "osdisk",
              "computeGalleries": "gal",
              "computeSnapshots": "snap-",
              "computeVirtualMachines": "vm",
              "computeVirtualMachineScaleSets": "vmss-",
              "containerInstanceContainerGroups": "ci",
              "containerRegistryRegistries": "cr",
              "containerServiceManagedClusters": "aks-",
              "databricksWorkspaces": "dbw-",
              "dataFactoryFactories": "adf-",
              "dataLakeAnalyticsAccounts": "dla",
              "dataLakeStoreAccounts": "dls",
              "dataMigrationServices": "dms-",
              "dBforMySQLServers": "mysql-",
              "dBforPostgreSQLServers": "psql-",
              "devicesIotHubs": "iot-",
              "devicesProvisioningServices": "provs-",
              "devicesProvisioningServicesCertificates": "pcert-",
              "documentDBDatabaseAccounts": "cosmos-",
              "eventGridDomains": "evgd-",
              "eventGridDomainsTopics": "evgt-",
              "eventGridEventSubscriptions": "evgs-",
              "eventHubNamespaces": "evhns-",
              "eventHubNamespacesEventHubs": "evh-",
              "hdInsightClustersHadoop": "hadoop-",
              "hdInsightClustersHbase": "hbase-",
              "hdInsightClustersKafka": "kafka-",
              "hdInsightClustersMl": "mls-",
              "hdInsightClustersSpark": "spark-",
              "hdInsightClustersStorm": "storm-",
              "hybridComputeMachines": "arcs-",
              "insightsActionGroups": "ag-",
              "insightsComponents": "appi-",
              "keyVaultVaults": "kv-",
              "kubernetesConnectedClusters": "arck",
              "kustoClusters": "dec",
              "kustoClustersDatabases": "dedb",
              "logicIntegrationAccounts": "ia-",
              "logicWorkflows": "logic-",
              "machineLearningServicesWorkspaces": "mlw-",
              "managedIdentityUserAssignedIdentities": "id-",
              "managementManagementGroups": "mg-",
              "migrateAssessmentProjects": "migr-",
              "networkApplicationGateways": "agw-",
              "networkApplicationSecurityGroups": "asg-",
              "networkAzureFirewalls": "afw-",
              "networkBastionHosts": "bas-",
              "networkConnections": "con-",
              "networkDnsZones": "dnsz-",
              "networkExpressRouteCircuits": "erc-",
              "networkFirewallPolicies": "afwp-",
              "networkFirewallPoliciesWebApplication": "waf",
              "networkFirewallPoliciesRuleGroups": "wafrg",
              "networkFrontDoors": "fd-",
              "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
              "networkLoadBalancersExternal": "lbe-",
              "networkLoadBalancersInternal": "lbi-",
              "networkLoadBalancersInboundNatRules": "rule-",
              "networkLocalNetworkGateways": "lgw-",
              "networkNatGateways": "ng-",
              "networkNetworkInterfaces": "nic-",
              "networkNetworkSecurityGroups": "nsg-",
              "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
              "networkNetworkWatchers": "nw-",
              "networkPrivateDnsZones": "pdnsz-",
              "networkPrivateLinkServices": "pl-",
              "networkPublicIPAddresses": "pip-",
              "networkPublicIPPrefixes": "ippre-",
              "networkRouteFilters": "rf-",
              "networkRouteTables": "rt-",
              "networkRouteTablesRoutes": "udr-",
              "networkTrafficManagerProfiles": "traf-",
              "networkVirtualNetworkGateways": "vgw-",
              "networkVirtualNetworks": "vnet-",
              "networkVirtualNetworksSubnets": "snet-",
              "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
              "networkVirtualWans": "vwan-",
              "networkVpnGateways": "vpng-",
              "networkVpnGatewaysVpnConnections": "vcn-",
              "networkVpnGatewaysVpnSites": "vst-",
              "notificationHubsNamespaces": "ntfns-",
              "notificationHubsNamespacesNotificationHubs": "ntf-",
              "operationalInsightsWorkspaces": "log-",
              "portalDashboards": "dash-",
              "powerBIDedicatedCapacities": "pbi-",
              "purviewAccounts": "pview-",
              "recoveryServicesVaults": "rsv-",
              "resourcesResourceGroups": "rg-",
              "searchSearchServices": "srch-",
              "serviceBusNamespaces": "sb-",
              "serviceBusNamespacesQueues": "sbq-",
              "serviceBusNamespacesTopics": "sbt-",
              "serviceEndPointPolicies": "se-",
              "serviceFabricClusters": "sf-",
              "signalRServiceSignalR": "sigr",
              "sqlManagedInstances": "sqlmi-",
              "sqlServers": "sql-",
              "sqlServersDataWarehouse": "sqldw-",
              "sqlServersDatabases": "sqldb-",
              "sqlServersDatabasesStretch": "sqlstrdb-",
              "storageStorageAccounts": "st",
              "storageStorageAccountsVm": "stvm",
              "storSimpleManagers": "ssimp",
              "streamAnalyticsCluster": "asa-",
              "synapseWorkspaces": "syn",
              "synapseWorkspacesAnalyticsWorkspaces": "synw",
              "synapseWorkspacesSqlPoolsDedicated": "syndp",
              "synapseWorkspacesSqlPoolsSpark": "synsp",
              "timeSeriesInsightsEnvironments": "tsi-",
              "webServerFarms": "plan-",
              "webSitesAppService": "app-",
              "webSitesAppServiceEnvironment": "ase-",
              "webSitesFunctions": "func-",
              "webStaticSites": "stapp-"
            },
            "abbrs": "[variables('$fxv#0')]"
          },
          "resources": {
            "resourceGroup": {
              "existing": true,
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('resourceGroupName')]"
            },
            "formRecognizerResourceGroup": {
              "condition": "[not(empty(parameters('formRecognizerResourceGroupName')))]",
              "existing": true,
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[if(not(empty(parameters('formRecognizerResourceGroupName'))), parameters('formRecognizerResourceGroupName'), parameters('resourceGroupName'))]"
            },
            "formRecognizer": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "formrecognizer",
              "resourceGroup": "[if(not(empty(parameters('formRecognizerResourceGroupName'))), parameters('formRecognizerResourceGroupName'), parameters('resourceGroupName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": "[if(not(empty(parameters('formRecognizerServiceName'))), createObject('value', parameters('formRecognizerServiceName')), createObject('value', format('{0}{1}', variables('abbrs').cognitiveServicesFormRecognizer, parameters('resourceToken'))))]",
                  "kind": {
                    "value": "FormRecognizer"
                  },
                  "location": {
                    "value": "[parameters('formRecognizerResourceGroupLocation')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "sku": {
                    "value": {
                      "name": "[parameters('formRecognizerSkuName')]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "3021473135511393637"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "defaultValue": "[parameters('name')]"
                    },
                    "deployments": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "OpenAI"
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Enabled"
                    },
                    "sku": {
                      "type": "object",
                      "defaultValue": {
                        "name": "S0"
                      }
                    }
                  },
                  "resources": {
                    "account": {
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2023-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "customSubDomainName": "[parameters('customSubDomainName')]",
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
                      },
                      "sku": "[parameters('sku')]"
                    },
                    "deployment": {
                      "copy": {
                        "name": "deployment",
                        "count": "[length(parameters('deployments'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('deployments')[copyIndex()].name)]",
                      "properties": {
                        "model": "[parameters('deployments')[copyIndex()].model]",
                        "raiPolicyName": "[if(contains(parameters('deployments')[copyIndex()], 'raiPolicyName'), parameters('deployments')[copyIndex()].raiPolicyName, null())]"
                      },
                      "sku": {
                        "name": "Standard",
                        "capacity": "[parameters('deployments')[copyIndex()].capacity]"
                      },
                      "dependsOn": [
                        "account"
                      ]
                    }
                  },
                  "outputs": {
                    "endpoint": {
                      "type": "string",
                      "value": "[reference('account').endpoint]"
                    },
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "skuName": {
                      "type": "string",
                      "value": "[reference('account', '2023-05-01', 'full').sku.name]"
                    },
                    "key": {
                      "type": "string",
                      "value": "[listKeys('account', '2023-05-01').key1]"
                    }
                  }
                }
              }
            },
            "formRecognizerRoleUser": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "formrecognizer-role-user",
              "resourceGroup": "[if(not(empty(parameters('formRecognizerResourceGroupName'))), parameters('formRecognizerResourceGroupName'), parameters('resourceGroupName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('principalId')]"
                  },
                  "roleDefinitionId": {
                    "value": "a97b65f3-24c7-4388-baec-2e87135dc908"
                  },
                  "principalType": {
                    "value": "User"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "14607554765285051200"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "ServicePrincipal",
                      "allowedValues": [
                        "Device",
                        "ForeignGroup",
                        "Group",
                        "ServicePrincipal",
                        "User"
                      ]
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
                      }
                    }
                  ]
                }
              }
            }
          },
          "outputs": {
            "AZURE_FORMRECOGNIZER_SERVICE": {
              "type": "string",
              "value": "[reference('formRecognizer').outputs.name.value]"
            },
            "AZURE_FORMRECOGNIZER_RESOURCE_GROUP": {
              "type": "string",
              "value": "[if(not(empty(parameters('formRecognizerResourceGroupName'))), parameters('formRecognizerResourceGroupName'), parameters('resourceGroupName'))]"
            },
            "AZURE_FORMRECOGNIZER_SKU_NAME": {
              "type": "string",
              "value": "[parameters('formRecognizerSkuName')]"
            }
          }
        }
      },
      "dependsOn": [
        "resourceGroup"
      ]
    }
  },
  "outputs": {
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "AZURE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
    },
    "BACKEND_URI": {
      "type": "string",
      "value": "[reference('backend').outputs.uri.value]"
    },
    "AZURE_SEARCH_INDEX": {
      "type": "string",
      "value": "[parameters('searchIndexName')]"
    },
    "AZURE_SEARCH_SERVICE": {
      "type": "string",
      "value": "[reference('searchService').outputs.name.value]"
    },
    "AZURE_SEARCH_SERVICE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[if(not(empty(parameters('searchServiceResourceGroupName'))), parameters('searchServiceResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
    },
    "AZURE_SEARCH_SKU_NAME": {
      "type": "string",
      "value": "[reference('searchService').outputs.skuName.value]"
    },
    "AZURE_SEARCH_KEY": {
      "type": "string",
      "value": "[reference('searchService').outputs.adminKey.value]"
    },
    "AZURE_SEARCH_USE_SEMANTIC_SEARCH": {
      "type": "bool",
      "value": "[parameters('searchUseSemanticSearch')]"
    },
    "AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG": {
      "type": "string",
      "value": "[parameters('searchSemanticSearchConfig')]"
    },
    "AZURE_SEARCH_TOP_K": {
      "type": "int",
      "value": "[parameters('searchTopK')]"
    },
    "AZURE_SEARCH_ENABLE_IN_DOMAIN": {
      "type": "bool",
      "value": "[parameters('searchEnableInDomain')]"
    },
    "AZURE_SEARCH_CONTENT_COLUMNS": {
      "type": "string",
      "value": "[parameters('searchContentColumns')]"
    },
    "AZURE_SEARCH_FILENAME_COLUMN": {
      "type": "string",
      "value": "[parameters('searchFilenameColumn')]"
    },
    "AZURE_SEARCH_TITLE_COLUMN": {
      "type": "string",
      "value": "[parameters('searchTitleColumn')]"
    },
    "AZURE_SEARCH_URL_COLUMN": {
      "type": "string",
      "value": "[parameters('searchUrlColumn')]"
    },
    "AZURE_OPENAI_RESOURCE": {
      "type": "string",
      "value": "[reference('openAi').outputs.name.value]"
    },
    "AZURE_OPENAI_RESOURCE_GROUP": {
      "type": "string",
      "value": "[if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "value": "[reference('openAi').outputs.endpoint.value]"
    },
    "AZURE_OPENAI_MODEL": {
      "type": "string",
      "value": "[parameters('openAIModel')]"
    },
    "AZURE_OPENAI_MODEL_NAME": {
      "type": "string",
      "value": "[parameters('openAIModelName')]"
    },
    "AZURE_OPENAI_SKU_NAME": {
      "type": "string",
      "value": "[reference('openAi').outputs.skuName.value]"
    },
    "AZURE_OPENAI_KEY": {
      "type": "string",
      "value": "[reference('openAi').outputs.key.value]"
    },
    "AZURE_OPENAI_EMBEDDING_NAME": {
      "type": "string",
      "value": "[format('{0}', parameters('embeddingDeploymentName'))]"
    },
    "AZURE_OPENAI_TEMPERATURE": {
      "type": "int",
      "value": "[parameters('openAITemperature')]"
    },
    "AZURE_OPENAI_TOP_P": {
      "type": "int",
      "value": "[parameters('openAITopP')]"
    },
    "AZURE_OPENAI_MAX_TOKENS": {
      "type": "int",
      "value": "[parameters('openAIMaxTokens')]"
    },
    "AZURE_OPENAI_STOP_SEQUENCE": {
      "type": "string",
      "value": "[parameters('openAIStopSequence')]"
    },
    "AZURE_OPENAI_SYSTEM_MESSAGE": {
      "type": "string",
      "value": "[parameters('openAISystemMessage')]"
    },
    "AZURE_OPENAI_STREAM": {
      "type": "bool",
      "value": "[parameters('openAIStream')]"
    },
    "AZURE_FORMRECOGNIZER_SERVICE": {
      "type": "string",
      "value": "[reference('docPrepResources').outputs.AZURE_FORMRECOGNIZER_SERVICE.value]"
    },
    "AZURE_FORMRECOGNIZER_RESOURCE_GROUP": {
      "type": "string",
      "value": "[reference('docPrepResources').outputs.AZURE_FORMRECOGNIZER_RESOURCE_GROUP.value]"
    },
    "AZURE_FORMRECOGNIZER_SKU_NAME": {
      "type": "string",
      "value": "[reference('docPrepResources').outputs.AZURE_FORMRECOGNIZER_SKU_NAME.value]"
    },
    "AZURE_COSMOSDB_ACCOUNT": {
      "type": "string",
      "value": "[reference('cosmos').outputs.accountName.value]"
    },
    "AZURE_COSMOSDB_DATABASE": {
      "type": "string",
      "value": "[reference('cosmos').outputs.databaseName.value]"
    },
    "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": {
      "type": "string",
      "value": "[reference('cosmos').outputs.containerName.value]"
    },
    "AUTH_ISSUER_URI": {
      "type": "string",
      "value": "[variables('authIssuerUri')]"
    }
  }
}